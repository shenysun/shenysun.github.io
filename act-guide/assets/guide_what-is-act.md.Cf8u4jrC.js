import{_ as t,c as a,o as e,a3 as r}from"./chunks/framework.ClEwN3w8.js";const u=JSON.parse('{"title":"什么是互动","description":"","frontmatter":{},"headers":[],"relativePath":"guide/what-is-act.md","filePath":"guide/what-is-act.md"}'),i={name:"guide/what-is-act.md"},o=r('<h1 id="what-is-act" tabindex="-1">什么是互动 <a class="header-anchor" href="#what-is-act" aria-label="Permalink to &quot;什么是互动 {#what-is-act}&quot;">​</a></h1><p>互动是指由授课端发起，允许学生参与的活动。分动一般分为两种：预制互动和非预制互动。一般情况下互动是由互动控制、互动回显、同屏等功能组成。</p><h2 id="why-refactor" tabindex="-1">为什么重构 <a class="header-anchor" href="#why-refactor" aria-label="Permalink to &quot;为什么重构 {#why-refactor}&quot;">​</a></h2><ul><li>数据回显模块经手人较多，代码可读性日益变差，遇到线上问题难以定位；</li><li>代码耦合度较高，牵一发而动全身，更改好一个问题可能会出现多个新问题；</li><li>授课端互动类型较多，规则不统一，原有的代码设计方案已经不足以承担新的需求；</li></ul><h2 id="refactor-target" tabindex="-1">重构目标 <a class="header-anchor" href="#refactor-target" aria-label="Permalink to &quot;重构目标 {#refactor-target}&quot;">​</a></h2><ul><li><p><strong>互动控制解耦</strong></p><p>新增互动生命周期 [lifecycle TODO]，封装多个关键钩子函数，单个互动独立维护；</p></li><li><p><strong>store 抽象化</strong></p><p>将物料、预制、非预制、统计、作答数据抽象。数据回显模块可复用（学情和互动回显均支持）；</p></li><li><p><strong>数据标准化</strong></p><p>抹平预制互动和非预制互动差异；抹平交互游戏和普通互动统计数据及作答数据差异；</p></li><li><p><strong>互动 UI 规范</strong></p><p>封装大量基础无样式组件，统一交互 UI 规范，减少重复代码；</p></li><li><p><strong>当然远不如此，等你做的更好</strong></p></li></ul>',6),s=[o];function l(c,n,h,p,_,d){return e(),a("div",null,s)}const g=t(i,[["render",l]]);export{u as __pageData,g as default};
