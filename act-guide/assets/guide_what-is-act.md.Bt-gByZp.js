import{_ as a,c as t,o as l,a3 as e}from"./chunks/framework.CUSIgMX_.js";const m=JSON.parse('{"title":"什么是互动","description":"","frontmatter":{},"headers":[],"relativePath":"guide/what-is-act.md","filePath":"guide/what-is-act.md"}'),i={name:"guide/what-is-act.md"},o=e('<h1 id="what-is-act" tabindex="-1">什么是互动 <a class="header-anchor" href="#what-is-act" aria-label="Permalink to &quot;什么是互动 {#what-is-act}&quot;">​</a></h1><p>互动是指由授课端发起，允许学生参与的活动。分动一般分为两种：预制互动和非预制互动。一般情况下互动是由互动控制、互动回显、同屏等功能组成。</p><h2 id="why-refactor" tabindex="-1">为什么重构 <a class="header-anchor" href="#why-refactor" aria-label="Permalink to &quot;为什么重构 {#why-refactor}&quot;">​</a></h2><ul><li>数据回显模块经手人较多，代码可读性日益变差，遇到线上问题难以定位；</li><li>代码耦合度较高，牵一发而动全身，更改好一个问题可能会出现多个新问题；</li><li>授课端互动类型较多，规则不统一，原有的代码设计方案已经不足以承担新的需求；</li></ul><h2 id="refactor-target" tabindex="-1">重构目标 <a class="header-anchor" href="#refactor-target" aria-label="Permalink to &quot;重构目标 {#refactor-target}&quot;">​</a></h2><h3 id="refactor-target-decoupling" tabindex="-1">1. 互动控制解耦 <a class="header-anchor" href="#refactor-target-decoupling" aria-label="Permalink to &quot;1. 互动控制解耦 {#refactor-target-decoupling}&quot;">​</a></h3><p>新增互动生命周期 <a href="./system-architecture/#act-flow">lifecycle</a>，封装多个关键钩子函数，单个互动独立维护；</p><div class="danger custom-block"><p class="custom-block-title">历史缺陷</p><ol><li>互动控制耦合度高，牵一发而动全身；新增互动难，增加一个互动需要修改很多代码，甚至会导致影响其他互动；</li><li>互动状态管理混乱，无法准确判断当前互动状态；</li><li>没有统一的关键节点事件，数据来源不明；</li></ol></div><div class="tip custom-block"><p class="custom-block-title">重构优势</p><ol><li>互动控制完全解耦，开发者只需要关心当前互动。每个互动独立维护，互动之间互不影响；</li><li>将关键节点事件抽象（<code>onBeforeEnter/onEnter/beforeLeave/onLeave/onActStart/onActStop/onActFinish</code>），开发者无需关心事件来源，降低开发者的心智负担；</li><li>使用继承，可复用已有代码的同时又可以自定义；提高效率的同时又有较高的可扩展性；</li></ol></div><h3 id="refactor-target-store" tabindex="-1">2. 互动数据抽象 <a class="header-anchor" href="#refactor-target-store" aria-label="Permalink to &quot;2. 互动数据抽象 {#refactor-target-store}&quot;">​</a></h3><p>将物料、预制、非预制、统计、作答数据抽象。数据回显模块可复用，学情和互动回显均支持；</p><div class="danger custom-block"><p class="custom-block-title">历史缺陷</p><ol><li>回显核心逻辑没有分模块，近4000行代码；回显数据流转周期长，数据来源不明，数据错误无法定位；偶现互动无法发起、学生个人数据重复始终存在；</li><li>多互动时无效消费数据，容易造成错误数据统计和不必要的UI更新；</li><li>互动控制和互动回显将物料数据请求多次，造成不必要的性能和网络浪费；</li><li>初始化或刷新时，就把所有互动的数据组合好，过早的初始化不仅把互动间的逻辑耦合，也导致不必要的内存占用；</li></ol></div><div class="tip custom-block"><p class="custom-block-title">重构优势</p><ol><li>使用pinia进行统一的数据管理，数据流转周期短，数据来源明确，数据错误可定位；</li><li>无论是物料还是互动配置数据，有且只有一个地方维护，避免数据重复；</li><li>动态数据组合，只有当互动发起后消费数据时，才会组合数据，避免不必要的性能占用；</li></ol></div><h3 id="refactor-target-type" tabindex="-1">3. 数据标准化、类型化 <a class="header-anchor" href="#refactor-target-type" aria-label="Permalink to &quot;3. 数据标准化、类型化 {#refactor-target-type}&quot;">​</a></h3><p>抹平预制互动和非预制互动差异；抹平交互游戏和普通互动统计数据及作答数据差异；非常全面的类型定义。都可以通过类型检查；</p><div class="danger custom-block"><p class="custom-block-title">历史缺陷</p><ol><li>没有标准数据结构，开发者即使已经获取到数据，也需要先debug后才能确定数据当前类型；即使理清一个互动的流程，换一个互动时，可能还需要重新梳理；</li><li>类型错误频发。静态类型检查表现弱，代码健壮性较差；</li><li>团队协作困难，没有约定处理数据，代码数据差异性较大；</li></ol></div><div class="tip custom-block"><p class="custom-block-title">重构优势</p><ol><li>统一的数据，抹平服务端和Pomelo、交互游戏和普通互动、预制和非预制之间的数据差异。为流程统一夯实基础；</li><li>数据类型化，无论是接口还是Pomelo所有数据均有类型。不同数据组合后也有类型定义，形成统一的数据类型，提高代码的可维护性；</li><li>通过类型定义和标准化步骤，保证输入输出数据符合预期，减少后续处理中的异常情况；</li><li>静态检查、智能提示不仅提升开发效率，还减少很多错误；提交代码一键类型检查，提高代码的健壮性；</li></ol></div><h3 id="refactor-target-ui" tabindex="-1">4. 互动 UI 规范 <a class="header-anchor" href="#refactor-target-ui" aria-label="Permalink to &quot;4. 互动 UI 规范 {#refactor-target-ui}&quot;">​</a></h3><p>封装大量基础样式组件，统一交互 UI 规范，减少重复代码，扩展性强；</p><div class="danger custom-block"><p class="custom-block-title">历史缺陷</p><ol><li>通用组件抽离粗糙，添加大量的Props，难以理解。处理过多的逻辑，代码冗余；</li><li>通用组件扩展难，一些细微的差别就无法复用。修改通用组件，无法判断影响范围；</li></ol></div><div class="tip custom-block"><p class="custom-block-title">重构优势</p><ol><li><a href="./system-architecture/#no-style-component">组件抽离细致</a>，包含通用样式，提升开发效率；</li><li>组件扩展方便，通过组件之间的自由组合，可实现丰富的功能；</li></ol></div><h2 id="refactor-range" tabindex="-1">改动范围 <a class="header-anchor" href="#refactor-range" aria-label="Permalink to &quot;改动范围 {#refactor-range}&quot;">​</a></h2><ul><li>互动控制完全重构 (interact library)</li><li>互动回显完全重构 (dataview library)</li><li>学情互动回显部分重构</li><li>互动同屏完全重构</li></ul>',23),r=[o];function c(s,d,n,h,u,p){return l(),t("div",null,r)}const b=a(i,[["render",c]]);export{m as __pageData,b as default};
